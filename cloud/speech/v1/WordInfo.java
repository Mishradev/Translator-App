// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/speech/v1/cloud_speech.proto

package com.google.cloud.speech.v1;

/**
 * <pre>
 * Word-specific information for recognized words. Word information is only
 * included in the response when certain request parameters are set, such
 * as `enable_word_time_offsets`.
 * </pre>
 *
 * Protobuf type {@code google.cloud.speech.v1.WordInfo}
 */
public  final class WordInfo extends
    com.google.protobuf.GeneratedMessageLite<
        WordInfo, WordInfo.Builder> implements
    // @@protoc_insertion_point(message_implements:google.cloud.speech.v1.WordInfo)
    WordInfoOrBuilder {
  private WordInfo() {
    word_ = "";
  }
  public static final int START_TIME_FIELD_NUMBER = 1;
  private com.google.protobuf.Duration startTime_;
  /**
   * <pre>
   * *Output-only* Time offset relative to the beginning of the audio,
   * and corresponding to the start of the spoken word.
   * This field is only set if `enable_word_time_offsets=true` and only
   * in the top hypothesis.
   * This is an experimental feature and the accuracy of the time offset can
   * vary.
   * </pre>
   *
   * <code>optional .google.protobuf.Duration start_time = 1;</code>
   */
  public boolean hasStartTime() {
    return startTime_ != null;
  }
  /**
   * <pre>
   * *Output-only* Time offset relative to the beginning of the audio,
   * and corresponding to the start of the spoken word.
   * This field is only set if `enable_word_time_offsets=true` and only
   * in the top hypothesis.
   * This is an experimental feature and the accuracy of the time offset can
   * vary.
   * </pre>
   *
   * <code>optional .google.protobuf.Duration start_time = 1;</code>
   */
  public com.google.protobuf.Duration getStartTime() {
    return startTime_ == null ? com.google.protobuf.Duration.getDefaultInstance() : startTime_;
  }
  /**
   * <pre>
   * *Output-only* Time offset relative to the beginning of the audio,
   * and corresponding to the start of the spoken word.
   * This field is only set if `enable_word_time_offsets=true` and only
   * in the top hypothesis.
   * This is an experimental feature and the accuracy of the time offset can
   * vary.
   * </pre>
   *
   * <code>optional .google.protobuf.Duration start_time = 1;</code>
   */
  private void setStartTime(com.google.protobuf.Duration value) {
    if (value == null) {
      throw new NullPointerException();
    }
    startTime_ = value;
    
    }
  /**
   * <pre>
   * *Output-only* Time offset relative to the beginning of the audio,
   * and corresponding to the start of the spoken word.
   * This field is only set if `enable_word_time_offsets=true` and only
   * in the top hypothesis.
   * This is an experimental feature and the accuracy of the time offset can
   * vary.
   * </pre>
   *
   * <code>optional .google.protobuf.Duration start_time = 1;</code>
   */
  private void setStartTime(
      com.google.protobuf.Duration.Builder builderForValue) {
    startTime_ = builderForValue.build();
    
  }
  /**
   * <pre>
   * *Output-only* Time offset relative to the beginning of the audio,
   * and corresponding to the start of the spoken word.
   * This field is only set if `enable_word_time_offsets=true` and only
   * in the top hypothesis.
   * This is an experimental feature and the accuracy of the time offset can
   * vary.
   * </pre>
   *
   * <code>optional .google.protobuf.Duration start_time = 1;</code>
   */
  private void mergeStartTime(com.google.protobuf.Duration value) {
    if (startTime_ != null &&
        startTime_ != com.google.protobuf.Duration.getDefaultInstance()) {
      startTime_ =
        com.google.protobuf.Duration.newBuilder(startTime_).mergeFrom(value).buildPartial();
    } else {
      startTime_ = value;
    }
    
  }
  /**
   * <pre>
   * *Output-only* Time offset relative to the beginning of the audio,
   * and corresponding to the start of the spoken word.
   * This field is only set if `enable_word_time_offsets=true` and only
   * in the top hypothesis.
   * This is an experimental feature and the accuracy of the time offset can
   * vary.
   * </pre>
   *
   * <code>optional .google.protobuf.Duration start_time = 1;</code>
   */
  private void clearStartTime() {  startTime_ = null;
    
  }

  public static final int END_TIME_FIELD_NUMBER = 2;
  private com.google.protobuf.Duration endTime_;
  /**
   * <pre>
   * *Output-only* Time offset relative to the beginning of the audio,
   * and corresponding to the end of the spoken word.
   * This field is only set if `enable_word_time_offsets=true` and only
   * in the top hypothesis.
   * This is an experimental feature and the accuracy of the time offset can
   * vary.
   * </pre>
   *
   * <code>optional .google.protobuf.Duration end_time = 2;</code>
   */
  public boolean hasEndTime() {
    return endTime_ != null;
  }
  /**
   * <pre>
   * *Output-only* Time offset relative to the beginning of the audio,
   * and corresponding to the end of the spoken word.
   * This field is only set if `enable_word_time_offsets=true` and only
   * in the top hypothesis.
   * This is an experimental feature and the accuracy of the time offset can
   * vary.
   * </pre>
   *
   * <code>optional .google.protobuf.Duration end_time = 2;</code>
   */
  public com.google.protobuf.Duration getEndTime() {
    return endTime_ == null ? com.google.protobuf.Duration.getDefaultInstance() : endTime_;
  }
  /**
   * <pre>
   * *Output-only* Time offset relative to the beginning of the audio,
   * and corresponding to the end of the spoken word.
   * This field is only set if `enable_word_time_offsets=true` and only
   * in the top hypothesis.
   * This is an experimental feature and the accuracy of the time offset can
   * vary.
   * </pre>
   *
   * <code>optional .google.protobuf.Duration end_time = 2;</code>
   */
  private void setEndTime(com.google.protobuf.Duration value) {
    if (value == null) {
      throw new NullPointerException();
    }
    endTime_ = value;
    
    }
  /**
   * <pre>
   * *Output-only* Time offset relative to the beginning of the audio,
   * and corresponding to the end of the spoken word.
   * This field is only set if `enable_word_time_offsets=true` and only
   * in the top hypothesis.
   * This is an experimental feature and the accuracy of the time offset can
   * vary.
   * </pre>
   *
   * <code>optional .google.protobuf.Duration end_time = 2;</code>
   */
  private void setEndTime(
      com.google.protobuf.Duration.Builder builderForValue) {
    endTime_ = builderForValue.build();
    
  }
  /**
   * <pre>
   * *Output-only* Time offset relative to the beginning of the audio,
   * and corresponding to the end of the spoken word.
   * This field is only set if `enable_word_time_offsets=true` and only
   * in the top hypothesis.
   * This is an experimental feature and the accuracy of the time offset can
   * vary.
   * </pre>
   *
   * <code>optional .google.protobuf.Duration end_time = 2;</code>
   */
  private void mergeEndTime(com.google.protobuf.Duration value) {
    if (endTime_ != null &&
        endTime_ != com.google.protobuf.Duration.getDefaultInstance()) {
      endTime_ =
        com.google.protobuf.Duration.newBuilder(endTime_).mergeFrom(value).buildPartial();
    } else {
      endTime_ = value;
    }
    
  }
  /**
   * <pre>
   * *Output-only* Time offset relative to the beginning of the audio,
   * and corresponding to the end of the spoken word.
   * This field is only set if `enable_word_time_offsets=true` and only
   * in the top hypothesis.
   * This is an experimental feature and the accuracy of the time offset can
   * vary.
   * </pre>
   *
   * <code>optional .google.protobuf.Duration end_time = 2;</code>
   */
  private void clearEndTime() {  endTime_ = null;
    
  }

  public static final int WORD_FIELD_NUMBER = 3;
  private java.lang.String word_;
  /**
   * <pre>
   * *Output-only* The word corresponding to this set of information.
   * </pre>
   *
   * <code>optional string word = 3;</code>
   */
  public java.lang.String getWord() {
    return word_;
  }
  /**
   * <pre>
   * *Output-only* The word corresponding to this set of information.
   * </pre>
   *
   * <code>optional string word = 3;</code>
   */
  public com.google.protobuf.ByteString
      getWordBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(word_);
  }
  /**
   * <pre>
   * *Output-only* The word corresponding to this set of information.
   * </pre>
   *
   * <code>optional string word = 3;</code>
   */
  private void setWord(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    word_ = value;
  }
  /**
   * <pre>
   * *Output-only* The word corresponding to this set of information.
   * </pre>
   *
   * <code>optional string word = 3;</code>
   */
  private void clearWord() {
    
    word_ = getDefaultInstance().getWord();
  }
  /**
   * <pre>
   * *Output-only* The word corresponding to this set of information.
   * </pre>
   *
   * <code>optional string word = 3;</code>
   */
  private void setWordBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    word_ = value.toStringUtf8();
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (startTime_ != null) {
      output.writeMessage(1, getStartTime());
    }
    if (endTime_ != null) {
      output.writeMessage(2, getEndTime());
    }
    if (!word_.isEmpty()) {
      output.writeString(3, getWord());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (startTime_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getStartTime());
    }
    if (endTime_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getEndTime());
    }
    if (!word_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(3, getWord());
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.google.cloud.speech.v1.WordInfo parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.cloud.speech.v1.WordInfo parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.cloud.speech.v1.WordInfo parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.cloud.speech.v1.WordInfo parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.cloud.speech.v1.WordInfo parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.cloud.speech.v1.WordInfo parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.cloud.speech.v1.WordInfo parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.google.cloud.speech.v1.WordInfo parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.cloud.speech.v1.WordInfo parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.cloud.speech.v1.WordInfo parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.cloud.speech.v1.WordInfo prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Word-specific information for recognized words. Word information is only
   * included in the response when certain request parameters are set, such
   * as `enable_word_time_offsets`.
   * </pre>
   *
   * Protobuf type {@code google.cloud.speech.v1.WordInfo}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.cloud.speech.v1.WordInfo, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.cloud.speech.v1.WordInfo)
      com.google.cloud.speech.v1.WordInfoOrBuilder {
    // Construct using com.google.cloud.speech.v1.WordInfo.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * *Output-only* Time offset relative to the beginning of the audio,
     * and corresponding to the start of the spoken word.
     * This field is only set if `enable_word_time_offsets=true` and only
     * in the top hypothesis.
     * This is an experimental feature and the accuracy of the time offset can
     * vary.
     * </pre>
     *
     * <code>optional .google.protobuf.Duration start_time = 1;</code>
     */
    public boolean hasStartTime() {
      return instance.hasStartTime();
    }
    /**
     * <pre>
     * *Output-only* Time offset relative to the beginning of the audio,
     * and corresponding to the start of the spoken word.
     * This field is only set if `enable_word_time_offsets=true` and only
     * in the top hypothesis.
     * This is an experimental feature and the accuracy of the time offset can
     * vary.
     * </pre>
     *
     * <code>optional .google.protobuf.Duration start_time = 1;</code>
     */
    public com.google.protobuf.Duration getStartTime() {
      return instance.getStartTime();
    }
    /**
     * <pre>
     * *Output-only* Time offset relative to the beginning of the audio,
     * and corresponding to the start of the spoken word.
     * This field is only set if `enable_word_time_offsets=true` and only
     * in the top hypothesis.
     * This is an experimental feature and the accuracy of the time offset can
     * vary.
     * </pre>
     *
     * <code>optional .google.protobuf.Duration start_time = 1;</code>
     */
    public Builder setStartTime(com.google.protobuf.Duration value) {
      copyOnWrite();
      instance.setStartTime(value);
      return this;
      }
    /**
     * <pre>
     * *Output-only* Time offset relative to the beginning of the audio,
     * and corresponding to the start of the spoken word.
     * This field is only set if `enable_word_time_offsets=true` and only
     * in the top hypothesis.
     * This is an experimental feature and the accuracy of the time offset can
     * vary.
     * </pre>
     *
     * <code>optional .google.protobuf.Duration start_time = 1;</code>
     */
    public Builder setStartTime(
        com.google.protobuf.Duration.Builder builderForValue) {
      copyOnWrite();
      instance.setStartTime(builderForValue);
      return this;
    }
    /**
     * <pre>
     * *Output-only* Time offset relative to the beginning of the audio,
     * and corresponding to the start of the spoken word.
     * This field is only set if `enable_word_time_offsets=true` and only
     * in the top hypothesis.
     * This is an experimental feature and the accuracy of the time offset can
     * vary.
     * </pre>
     *
     * <code>optional .google.protobuf.Duration start_time = 1;</code>
     */
    public Builder mergeStartTime(com.google.protobuf.Duration value) {
      copyOnWrite();
      instance.mergeStartTime(value);
      return this;
    }
    /**
     * <pre>
     * *Output-only* Time offset relative to the beginning of the audio,
     * and corresponding to the start of the spoken word.
     * This field is only set if `enable_word_time_offsets=true` and only
     * in the top hypothesis.
     * This is an experimental feature and the accuracy of the time offset can
     * vary.
     * </pre>
     *
     * <code>optional .google.protobuf.Duration start_time = 1;</code>
     */
    public Builder clearStartTime() {  copyOnWrite();
      instance.clearStartTime();
      return this;
    }

    /**
     * <pre>
     * *Output-only* Time offset relative to the beginning of the audio,
     * and corresponding to the end of the spoken word.
     * This field is only set if `enable_word_time_offsets=true` and only
     * in the top hypothesis.
     * This is an experimental feature and the accuracy of the time offset can
     * vary.
     * </pre>
     *
     * <code>optional .google.protobuf.Duration end_time = 2;</code>
     */
    public boolean hasEndTime() {
      return instance.hasEndTime();
    }
    /**
     * <pre>
     * *Output-only* Time offset relative to the beginning of the audio,
     * and corresponding to the end of the spoken word.
     * This field is only set if `enable_word_time_offsets=true` and only
     * in the top hypothesis.
     * This is an experimental feature and the accuracy of the time offset can
     * vary.
     * </pre>
     *
     * <code>optional .google.protobuf.Duration end_time = 2;</code>
     */
    public com.google.protobuf.Duration getEndTime() {
      return instance.getEndTime();
    }
    /**
     * <pre>
     * *Output-only* Time offset relative to the beginning of the audio,
     * and corresponding to the end of the spoken word.
     * This field is only set if `enable_word_time_offsets=true` and only
     * in the top hypothesis.
     * This is an experimental feature and the accuracy of the time offset can
     * vary.
     * </pre>
     *
     * <code>optional .google.protobuf.Duration end_time = 2;</code>
     */
    public Builder setEndTime(com.google.protobuf.Duration value) {
      copyOnWrite();
      instance.setEndTime(value);
      return this;
      }
    /**
     * <pre>
     * *Output-only* Time offset relative to the beginning of the audio,
     * and corresponding to the end of the spoken word.
     * This field is only set if `enable_word_time_offsets=true` and only
     * in the top hypothesis.
     * This is an experimental feature and the accuracy of the time offset can
     * vary.
     * </pre>
     *
     * <code>optional .google.protobuf.Duration end_time = 2;</code>
     */
    public Builder setEndTime(
        com.google.protobuf.Duration.Builder builderForValue) {
      copyOnWrite();
      instance.setEndTime(builderForValue);
      return this;
    }
    /**
     * <pre>
     * *Output-only* Time offset relative to the beginning of the audio,
     * and corresponding to the end of the spoken word.
     * This field is only set if `enable_word_time_offsets=true` and only
     * in the top hypothesis.
     * This is an experimental feature and the accuracy of the time offset can
     * vary.
     * </pre>
     *
     * <code>optional .google.protobuf.Duration end_time = 2;</code>
     */
    public Builder mergeEndTime(com.google.protobuf.Duration value) {
      copyOnWrite();
      instance.mergeEndTime(value);
      return this;
    }
    /**
     * <pre>
     * *Output-only* Time offset relative to the beginning of the audio,
     * and corresponding to the end of the spoken word.
     * This field is only set if `enable_word_time_offsets=true` and only
     * in the top hypothesis.
     * This is an experimental feature and the accuracy of the time offset can
     * vary.
     * </pre>
     *
     * <code>optional .google.protobuf.Duration end_time = 2;</code>
     */
    public Builder clearEndTime() {  copyOnWrite();
      instance.clearEndTime();
      return this;
    }

    /**
     * <pre>
     * *Output-only* The word corresponding to this set of information.
     * </pre>
     *
     * <code>optional string word = 3;</code>
     */
    public java.lang.String getWord() {
      return instance.getWord();
    }
    /**
     * <pre>
     * *Output-only* The word corresponding to this set of information.
     * </pre>
     *
     * <code>optional string word = 3;</code>
     */
    public com.google.protobuf.ByteString
        getWordBytes() {
      return instance.getWordBytes();
    }
    /**
     * <pre>
     * *Output-only* The word corresponding to this set of information.
     * </pre>
     *
     * <code>optional string word = 3;</code>
     */
    public Builder setWord(
        java.lang.String value) {
      copyOnWrite();
      instance.setWord(value);
      return this;
    }
    /**
     * <pre>
     * *Output-only* The word corresponding to this set of information.
     * </pre>
     *
     * <code>optional string word = 3;</code>
     */
    public Builder clearWord() {
      copyOnWrite();
      instance.clearWord();
      return this;
    }
    /**
     * <pre>
     * *Output-only* The word corresponding to this set of information.
     * </pre>
     *
     * <code>optional string word = 3;</code>
     */
    public Builder setWordBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setWordBytes(value);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.cloud.speech.v1.WordInfo)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.cloud.speech.v1.WordInfo();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.google.cloud.speech.v1.WordInfo other = (com.google.cloud.speech.v1.WordInfo) arg1;
        startTime_ = visitor.visitMessage(startTime_, other.startTime_);
        endTime_ = visitor.visitMessage(endTime_, other.endTime_);
        word_ = visitor.visitString(!word_.isEmpty(), word_,
            !other.word_.isEmpty(), other.word_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                com.google.protobuf.Duration.Builder subBuilder = null;
                if (startTime_ != null) {
                  subBuilder = startTime_.toBuilder();
                }
                startTime_ = input.readMessage(com.google.protobuf.Duration.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(startTime_);
                  startTime_ = subBuilder.buildPartial();
                }

                break;
              }
              case 18: {
                com.google.protobuf.Duration.Builder subBuilder = null;
                if (endTime_ != null) {
                  subBuilder = endTime_.toBuilder();
                }
                endTime_ = input.readMessage(com.google.protobuf.Duration.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(endTime_);
                  endTime_ = subBuilder.buildPartial();
                }

                break;
              }
              case 26: {
                String s = input.readStringRequireUtf8();

                word_ = s;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.google.cloud.speech.v1.WordInfo.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.WordInfo)
  private static final com.google.cloud.speech.v1.WordInfo DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new WordInfo();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.google.cloud.speech.v1.WordInfo getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<WordInfo> PARSER;

  public static com.google.protobuf.Parser<WordInfo> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

