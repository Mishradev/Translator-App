// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/speech/v1/cloud_speech.proto

package com.google.cloud.speech.v1;

/**
 * <pre>
 * A streaming speech recognition result corresponding to a portion of the audio
 * that is currently being processed.
 * </pre>
 *
 * Protobuf type {@code google.cloud.speech.v1.StreamingRecognitionResult}
 */
public  final class StreamingRecognitionResult extends
    com.google.protobuf.GeneratedMessageLite<
        StreamingRecognitionResult, StreamingRecognitionResult.Builder> implements
    // @@protoc_insertion_point(message_implements:google.cloud.speech.v1.StreamingRecognitionResult)
    StreamingRecognitionResultOrBuilder {
  private StreamingRecognitionResult() {
    alternatives_ = emptyProtobufList();
  }
  private int bitField0_;
  public static final int ALTERNATIVES_FIELD_NUMBER = 1;
  private com.google.protobuf.Internal.ProtobufList<com.google.cloud.speech.v1.SpeechRecognitionAlternative> alternatives_;
  /**
   * <pre>
   * *Output-only* May contain one or more recognition hypotheses (up to the
   * maximum specified in `max_alternatives`).
   * </pre>
   *
   * <code>repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;</code>
   */
  public java.util.List<com.google.cloud.speech.v1.SpeechRecognitionAlternative> getAlternativesList() {
    return alternatives_;
  }
  /**
   * <pre>
   * *Output-only* May contain one or more recognition hypotheses (up to the
   * maximum specified in `max_alternatives`).
   * </pre>
   *
   * <code>repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;</code>
   */
  public java.util.List<? extends com.google.cloud.speech.v1.SpeechRecognitionAlternativeOrBuilder> 
      getAlternativesOrBuilderList() {
    return alternatives_;
  }
  /**
   * <pre>
   * *Output-only* May contain one or more recognition hypotheses (up to the
   * maximum specified in `max_alternatives`).
   * </pre>
   *
   * <code>repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;</code>
   */
  public int getAlternativesCount() {
    return alternatives_.size();
  }
  /**
   * <pre>
   * *Output-only* May contain one or more recognition hypotheses (up to the
   * maximum specified in `max_alternatives`).
   * </pre>
   *
   * <code>repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;</code>
   */
  public com.google.cloud.speech.v1.SpeechRecognitionAlternative getAlternatives(int index) {
    return alternatives_.get(index);
  }
  /**
   * <pre>
   * *Output-only* May contain one or more recognition hypotheses (up to the
   * maximum specified in `max_alternatives`).
   * </pre>
   *
   * <code>repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;</code>
   */
  public com.google.cloud.speech.v1.SpeechRecognitionAlternativeOrBuilder getAlternativesOrBuilder(
      int index) {
    return alternatives_.get(index);
  }
  private void ensureAlternativesIsMutable() {
    if (!alternatives_.isModifiable()) {
      alternatives_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(alternatives_);
     }
  }

  /**
   * <pre>
   * *Output-only* May contain one or more recognition hypotheses (up to the
   * maximum specified in `max_alternatives`).
   * </pre>
   *
   * <code>repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;</code>
   */
  private void setAlternatives(
      int index, com.google.cloud.speech.v1.SpeechRecognitionAlternative value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureAlternativesIsMutable();
    alternatives_.set(index, value);
  }
  /**
   * <pre>
   * *Output-only* May contain one or more recognition hypotheses (up to the
   * maximum specified in `max_alternatives`).
   * </pre>
   *
   * <code>repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;</code>
   */
  private void setAlternatives(
      int index, com.google.cloud.speech.v1.SpeechRecognitionAlternative.Builder builderForValue) {
    ensureAlternativesIsMutable();
    alternatives_.set(index, builderForValue.build());
  }
  /**
   * <pre>
   * *Output-only* May contain one or more recognition hypotheses (up to the
   * maximum specified in `max_alternatives`).
   * </pre>
   *
   * <code>repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;</code>
   */
  private void addAlternatives(com.google.cloud.speech.v1.SpeechRecognitionAlternative value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureAlternativesIsMutable();
    alternatives_.add(value);
  }
  /**
   * <pre>
   * *Output-only* May contain one or more recognition hypotheses (up to the
   * maximum specified in `max_alternatives`).
   * </pre>
   *
   * <code>repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;</code>
   */
  private void addAlternatives(
      int index, com.google.cloud.speech.v1.SpeechRecognitionAlternative value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureAlternativesIsMutable();
    alternatives_.add(index, value);
  }
  /**
   * <pre>
   * *Output-only* May contain one or more recognition hypotheses (up to the
   * maximum specified in `max_alternatives`).
   * </pre>
   *
   * <code>repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;</code>
   */
  private void addAlternatives(
      com.google.cloud.speech.v1.SpeechRecognitionAlternative.Builder builderForValue) {
    ensureAlternativesIsMutable();
    alternatives_.add(builderForValue.build());
  }
  /**
   * <pre>
   * *Output-only* May contain one or more recognition hypotheses (up to the
   * maximum specified in `max_alternatives`).
   * </pre>
   *
   * <code>repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;</code>
   */
  private void addAlternatives(
      int index, com.google.cloud.speech.v1.SpeechRecognitionAlternative.Builder builderForValue) {
    ensureAlternativesIsMutable();
    alternatives_.add(index, builderForValue.build());
  }
  /**
   * <pre>
   * *Output-only* May contain one or more recognition hypotheses (up to the
   * maximum specified in `max_alternatives`).
   * </pre>
   *
   * <code>repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;</code>
   */
  private void addAllAlternatives(
      java.lang.Iterable<? extends com.google.cloud.speech.v1.SpeechRecognitionAlternative> values) {
    ensureAlternativesIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, alternatives_);
  }
  /**
   * <pre>
   * *Output-only* May contain one or more recognition hypotheses (up to the
   * maximum specified in `max_alternatives`).
   * </pre>
   *
   * <code>repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;</code>
   */
  private void clearAlternatives() {
    alternatives_ = emptyProtobufList();
  }
  /**
   * <pre>
   * *Output-only* May contain one or more recognition hypotheses (up to the
   * maximum specified in `max_alternatives`).
   * </pre>
   *
   * <code>repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;</code>
   */
  private void removeAlternatives(int index) {
    ensureAlternativesIsMutable();
    alternatives_.remove(index);
  }

  public static final int IS_FINAL_FIELD_NUMBER = 2;
  private boolean isFinal_;
  /**
   * <pre>
   * *Output-only* If `false`, this `StreamingRecognitionResult` represents an
   * interim result that may change. If `true`, this is the final time the
   * speech service will return this particular `StreamingRecognitionResult`,
   * the recognizer will not return any further hypotheses for this portion of
   * the transcript and corresponding audio.
   * </pre>
   *
   * <code>optional bool is_final = 2;</code>
   */
  public boolean getIsFinal() {
    return isFinal_;
  }
  /**
   * <pre>
   * *Output-only* If `false`, this `StreamingRecognitionResult` represents an
   * interim result that may change. If `true`, this is the final time the
   * speech service will return this particular `StreamingRecognitionResult`,
   * the recognizer will not return any further hypotheses for this portion of
   * the transcript and corresponding audio.
   * </pre>
   *
   * <code>optional bool is_final = 2;</code>
   */
  private void setIsFinal(boolean value) {
    
    isFinal_ = value;
  }
  /**
   * <pre>
   * *Output-only* If `false`, this `StreamingRecognitionResult` represents an
   * interim result that may change. If `true`, this is the final time the
   * speech service will return this particular `StreamingRecognitionResult`,
   * the recognizer will not return any further hypotheses for this portion of
   * the transcript and corresponding audio.
   * </pre>
   *
   * <code>optional bool is_final = 2;</code>
   */
  private void clearIsFinal() {
    
    isFinal_ = false;
  }

  public static final int STABILITY_FIELD_NUMBER = 3;
  private float stability_;
  /**
   * <pre>
   * *Output-only* An estimate of the likelihood that the recognizer will not
   * change its guess about this interim result. Values range from 0.0
   * (completely unstable) to 1.0 (completely stable).
   * This field is only provided for interim results (`is_final=false`).
   * The default of 0.0 is a sentinel value indicating `stability` was not set.
   * </pre>
   *
   * <code>optional float stability = 3;</code>
   */
  public float getStability() {
    return stability_;
  }
  /**
   * <pre>
   * *Output-only* An estimate of the likelihood that the recognizer will not
   * change its guess about this interim result. Values range from 0.0
   * (completely unstable) to 1.0 (completely stable).
   * This field is only provided for interim results (`is_final=false`).
   * The default of 0.0 is a sentinel value indicating `stability` was not set.
   * </pre>
   *
   * <code>optional float stability = 3;</code>
   */
  private void setStability(float value) {
    
    stability_ = value;
  }
  /**
   * <pre>
   * *Output-only* An estimate of the likelihood that the recognizer will not
   * change its guess about this interim result. Values range from 0.0
   * (completely unstable) to 1.0 (completely stable).
   * This field is only provided for interim results (`is_final=false`).
   * The default of 0.0 is a sentinel value indicating `stability` was not set.
   * </pre>
   *
   * <code>optional float stability = 3;</code>
   */
  private void clearStability() {
    
    stability_ = 0F;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < alternatives_.size(); i++) {
      output.writeMessage(1, alternatives_.get(i));
    }
    if (isFinal_ != false) {
      output.writeBool(2, isFinal_);
    }
    if (stability_ != 0F) {
      output.writeFloat(3, stability_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < alternatives_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, alternatives_.get(i));
    }
    if (isFinal_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(2, isFinal_);
    }
    if (stability_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(3, stability_);
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.google.cloud.speech.v1.StreamingRecognitionResult parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.cloud.speech.v1.StreamingRecognitionResult parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.cloud.speech.v1.StreamingRecognitionResult parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.cloud.speech.v1.StreamingRecognitionResult parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.cloud.speech.v1.StreamingRecognitionResult parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.cloud.speech.v1.StreamingRecognitionResult parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.cloud.speech.v1.StreamingRecognitionResult parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.google.cloud.speech.v1.StreamingRecognitionResult parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.cloud.speech.v1.StreamingRecognitionResult parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.cloud.speech.v1.StreamingRecognitionResult parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.cloud.speech.v1.StreamingRecognitionResult prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * A streaming speech recognition result corresponding to a portion of the audio
   * that is currently being processed.
   * </pre>
   *
   * Protobuf type {@code google.cloud.speech.v1.StreamingRecognitionResult}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.cloud.speech.v1.StreamingRecognitionResult, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.cloud.speech.v1.StreamingRecognitionResult)
      com.google.cloud.speech.v1.StreamingRecognitionResultOrBuilder {
    // Construct using com.google.cloud.speech.v1.StreamingRecognitionResult.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * *Output-only* May contain one or more recognition hypotheses (up to the
     * maximum specified in `max_alternatives`).
     * </pre>
     *
     * <code>repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;</code>
     */
    public java.util.List<com.google.cloud.speech.v1.SpeechRecognitionAlternative> getAlternativesList() {
      return java.util.Collections.unmodifiableList(
          instance.getAlternativesList());
    }
    /**
     * <pre>
     * *Output-only* May contain one or more recognition hypotheses (up to the
     * maximum specified in `max_alternatives`).
     * </pre>
     *
     * <code>repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;</code>
     */
    public int getAlternativesCount() {
      return instance.getAlternativesCount();
    }/**
     * <pre>
     * *Output-only* May contain one or more recognition hypotheses (up to the
     * maximum specified in `max_alternatives`).
     * </pre>
     *
     * <code>repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;</code>
     */
    public com.google.cloud.speech.v1.SpeechRecognitionAlternative getAlternatives(int index) {
      return instance.getAlternatives(index);
    }
    /**
     * <pre>
     * *Output-only* May contain one or more recognition hypotheses (up to the
     * maximum specified in `max_alternatives`).
     * </pre>
     *
     * <code>repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;</code>
     */
    public Builder setAlternatives(
        int index, com.google.cloud.speech.v1.SpeechRecognitionAlternative value) {
      copyOnWrite();
      instance.setAlternatives(index, value);
      return this;
    }
    /**
     * <pre>
     * *Output-only* May contain one or more recognition hypotheses (up to the
     * maximum specified in `max_alternatives`).
     * </pre>
     *
     * <code>repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;</code>
     */
    public Builder setAlternatives(
        int index, com.google.cloud.speech.v1.SpeechRecognitionAlternative.Builder builderForValue) {
      copyOnWrite();
      instance.setAlternatives(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * *Output-only* May contain one or more recognition hypotheses (up to the
     * maximum specified in `max_alternatives`).
     * </pre>
     *
     * <code>repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;</code>
     */
    public Builder addAlternatives(com.google.cloud.speech.v1.SpeechRecognitionAlternative value) {
      copyOnWrite();
      instance.addAlternatives(value);
      return this;
    }
    /**
     * <pre>
     * *Output-only* May contain one or more recognition hypotheses (up to the
     * maximum specified in `max_alternatives`).
     * </pre>
     *
     * <code>repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;</code>
     */
    public Builder addAlternatives(
        int index, com.google.cloud.speech.v1.SpeechRecognitionAlternative value) {
      copyOnWrite();
      instance.addAlternatives(index, value);
      return this;
    }
    /**
     * <pre>
     * *Output-only* May contain one or more recognition hypotheses (up to the
     * maximum specified in `max_alternatives`).
     * </pre>
     *
     * <code>repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;</code>
     */
    public Builder addAlternatives(
        com.google.cloud.speech.v1.SpeechRecognitionAlternative.Builder builderForValue) {
      copyOnWrite();
      instance.addAlternatives(builderForValue);
      return this;
    }
    /**
     * <pre>
     * *Output-only* May contain one or more recognition hypotheses (up to the
     * maximum specified in `max_alternatives`).
     * </pre>
     *
     * <code>repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;</code>
     */
    public Builder addAlternatives(
        int index, com.google.cloud.speech.v1.SpeechRecognitionAlternative.Builder builderForValue) {
      copyOnWrite();
      instance.addAlternatives(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * *Output-only* May contain one or more recognition hypotheses (up to the
     * maximum specified in `max_alternatives`).
     * </pre>
     *
     * <code>repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;</code>
     */
    public Builder addAllAlternatives(
        java.lang.Iterable<? extends com.google.cloud.speech.v1.SpeechRecognitionAlternative> values) {
      copyOnWrite();
      instance.addAllAlternatives(values);
      return this;
    }
    /**
     * <pre>
     * *Output-only* May contain one or more recognition hypotheses (up to the
     * maximum specified in `max_alternatives`).
     * </pre>
     *
     * <code>repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;</code>
     */
    public Builder clearAlternatives() {
      copyOnWrite();
      instance.clearAlternatives();
      return this;
    }
    /**
     * <pre>
     * *Output-only* May contain one or more recognition hypotheses (up to the
     * maximum specified in `max_alternatives`).
     * </pre>
     *
     * <code>repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;</code>
     */
    public Builder removeAlternatives(int index) {
      copyOnWrite();
      instance.removeAlternatives(index);
      return this;
    }

    /**
     * <pre>
     * *Output-only* If `false`, this `StreamingRecognitionResult` represents an
     * interim result that may change. If `true`, this is the final time the
     * speech service will return this particular `StreamingRecognitionResult`,
     * the recognizer will not return any further hypotheses for this portion of
     * the transcript and corresponding audio.
     * </pre>
     *
     * <code>optional bool is_final = 2;</code>
     */
    public boolean getIsFinal() {
      return instance.getIsFinal();
    }
    /**
     * <pre>
     * *Output-only* If `false`, this `StreamingRecognitionResult` represents an
     * interim result that may change. If `true`, this is the final time the
     * speech service will return this particular `StreamingRecognitionResult`,
     * the recognizer will not return any further hypotheses for this portion of
     * the transcript and corresponding audio.
     * </pre>
     *
     * <code>optional bool is_final = 2;</code>
     */
    public Builder setIsFinal(boolean value) {
      copyOnWrite();
      instance.setIsFinal(value);
      return this;
    }
    /**
     * <pre>
     * *Output-only* If `false`, this `StreamingRecognitionResult` represents an
     * interim result that may change. If `true`, this is the final time the
     * speech service will return this particular `StreamingRecognitionResult`,
     * the recognizer will not return any further hypotheses for this portion of
     * the transcript and corresponding audio.
     * </pre>
     *
     * <code>optional bool is_final = 2;</code>
     */
    public Builder clearIsFinal() {
      copyOnWrite();
      instance.clearIsFinal();
      return this;
    }

    /**
     * <pre>
     * *Output-only* An estimate of the likelihood that the recognizer will not
     * change its guess about this interim result. Values range from 0.0
     * (completely unstable) to 1.0 (completely stable).
     * This field is only provided for interim results (`is_final=false`).
     * The default of 0.0 is a sentinel value indicating `stability` was not set.
     * </pre>
     *
     * <code>optional float stability = 3;</code>
     */
    public float getStability() {
      return instance.getStability();
    }
    /**
     * <pre>
     * *Output-only* An estimate of the likelihood that the recognizer will not
     * change its guess about this interim result. Values range from 0.0
     * (completely unstable) to 1.0 (completely stable).
     * This field is only provided for interim results (`is_final=false`).
     * The default of 0.0 is a sentinel value indicating `stability` was not set.
     * </pre>
     *
     * <code>optional float stability = 3;</code>
     */
    public Builder setStability(float value) {
      copyOnWrite();
      instance.setStability(value);
      return this;
    }
    /**
     * <pre>
     * *Output-only* An estimate of the likelihood that the recognizer will not
     * change its guess about this interim result. Values range from 0.0
     * (completely unstable) to 1.0 (completely stable).
     * This field is only provided for interim results (`is_final=false`).
     * The default of 0.0 is a sentinel value indicating `stability` was not set.
     * </pre>
     *
     * <code>optional float stability = 3;</code>
     */
    public Builder clearStability() {
      copyOnWrite();
      instance.clearStability();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.cloud.speech.v1.StreamingRecognitionResult)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.cloud.speech.v1.StreamingRecognitionResult();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        alternatives_.makeImmutable();
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.google.cloud.speech.v1.StreamingRecognitionResult other = (com.google.cloud.speech.v1.StreamingRecognitionResult) arg1;
        alternatives_= visitor.visitList(alternatives_, other.alternatives_);
        isFinal_ = visitor.visitBoolean(isFinal_ != false, isFinal_,
            other.isFinal_ != false, other.isFinal_);
        stability_ = visitor.visitFloat(stability_ != 0F, stability_,
            other.stability_ != 0F, other.stability_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                if (!alternatives_.isModifiable()) {
                  alternatives_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(alternatives_);
                }
                alternatives_.add(
                    input.readMessage(com.google.cloud.speech.v1.SpeechRecognitionAlternative.parser(), extensionRegistry));
                break;
              }
              case 16: {

                isFinal_ = input.readBool();
                break;
              }
              case 29: {

                stability_ = input.readFloat();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.google.cloud.speech.v1.StreamingRecognitionResult.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.StreamingRecognitionResult)
  private static final com.google.cloud.speech.v1.StreamingRecognitionResult DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new StreamingRecognitionResult();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.google.cloud.speech.v1.StreamingRecognitionResult getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<StreamingRecognitionResult> PARSER;

  public static com.google.protobuf.Parser<StreamingRecognitionResult> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

