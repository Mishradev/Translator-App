// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/speech/v1/cloud_speech.proto

package com.google.cloud.speech.v1;

/**
 * <pre>
 * The top-level message sent by the client for the `StreamingRecognize` method.
 * Multiple `StreamingRecognizeRequest` messages are sent. The first message
 * must contain a `streaming_config` message and must not contain `audio` data.
 * All subsequent messages must contain `audio` data and must not contain a
 * `streaming_config` message.
 * </pre>
 *
 * Protobuf type {@code google.cloud.speech.v1.StreamingRecognizeRequest}
 */
public  final class StreamingRecognizeRequest extends
    com.google.protobuf.GeneratedMessageLite<
        StreamingRecognizeRequest, StreamingRecognizeRequest.Builder> implements
    // @@protoc_insertion_point(message_implements:google.cloud.speech.v1.StreamingRecognizeRequest)
    StreamingRecognizeRequestOrBuilder {
  private StreamingRecognizeRequest() {
  }
  private int streamingRequestCase_ = 0;
  private java.lang.Object streamingRequest_;
  public enum StreamingRequestCase
      implements com.google.protobuf.Internal.EnumLite {
    STREAMING_CONFIG(1),
    AUDIO_CONTENT(2),
    STREAMINGREQUEST_NOT_SET(0);
    private final int value;
    private StreamingRequestCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static StreamingRequestCase valueOf(int value) {
      return forNumber(value);
    }

    public static StreamingRequestCase forNumber(int value) {
      switch (value) {
        case 1: return STREAMING_CONFIG;
        case 2: return AUDIO_CONTENT;
        case 0: return STREAMINGREQUEST_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public StreamingRequestCase
  getStreamingRequestCase() {
    return StreamingRequestCase.forNumber(
        streamingRequestCase_);
  }

  private void clearStreamingRequest() {
    streamingRequestCase_ = 0;
    streamingRequest_ = null;
  }

  public static final int STREAMING_CONFIG_FIELD_NUMBER = 1;
  /**
   * <pre>
   * Provides information to the recognizer that specifies how to process the
   * request. The first `StreamingRecognizeRequest` message must contain a
   * `streaming_config`  message.
   * </pre>
   *
   * <code>optional .google.cloud.speech.v1.StreamingRecognitionConfig streaming_config = 1;</code>
   */
  public com.google.cloud.speech.v1.StreamingRecognitionConfig getStreamingConfig() {
    if (streamingRequestCase_ == 1) {
       return (com.google.cloud.speech.v1.StreamingRecognitionConfig) streamingRequest_;
    }
    return com.google.cloud.speech.v1.StreamingRecognitionConfig.getDefaultInstance();
  }
  /**
   * <pre>
   * Provides information to the recognizer that specifies how to process the
   * request. The first `StreamingRecognizeRequest` message must contain a
   * `streaming_config`  message.
   * </pre>
   *
   * <code>optional .google.cloud.speech.v1.StreamingRecognitionConfig streaming_config = 1;</code>
   */
  private void setStreamingConfig(com.google.cloud.speech.v1.StreamingRecognitionConfig value) {
    if (value == null) {
      throw new NullPointerException();
    }
    streamingRequest_ = value;
    streamingRequestCase_ = 1;
  }
  /**
   * <pre>
   * Provides information to the recognizer that specifies how to process the
   * request. The first `StreamingRecognizeRequest` message must contain a
   * `streaming_config`  message.
   * </pre>
   *
   * <code>optional .google.cloud.speech.v1.StreamingRecognitionConfig streaming_config = 1;</code>
   */
  private void setStreamingConfig(
      com.google.cloud.speech.v1.StreamingRecognitionConfig.Builder builderForValue) {
    streamingRequest_ = builderForValue.build();
    streamingRequestCase_ = 1;
  }
  /**
   * <pre>
   * Provides information to the recognizer that specifies how to process the
   * request. The first `StreamingRecognizeRequest` message must contain a
   * `streaming_config`  message.
   * </pre>
   *
   * <code>optional .google.cloud.speech.v1.StreamingRecognitionConfig streaming_config = 1;</code>
   */
  private void mergeStreamingConfig(com.google.cloud.speech.v1.StreamingRecognitionConfig value) {
    if (streamingRequestCase_ == 1 &&
        streamingRequest_ != com.google.cloud.speech.v1.StreamingRecognitionConfig.getDefaultInstance()) {
      streamingRequest_ = com.google.cloud.speech.v1.StreamingRecognitionConfig.newBuilder((com.google.cloud.speech.v1.StreamingRecognitionConfig) streamingRequest_)
          .mergeFrom(value).buildPartial();
    } else {
      streamingRequest_ = value;
    }
    streamingRequestCase_ = 1;
  }
  /**
   * <pre>
   * Provides information to the recognizer that specifies how to process the
   * request. The first `StreamingRecognizeRequest` message must contain a
   * `streaming_config`  message.
   * </pre>
   *
   * <code>optional .google.cloud.speech.v1.StreamingRecognitionConfig streaming_config = 1;</code>
   */
  private void clearStreamingConfig() {
    if (streamingRequestCase_ == 1) {
      streamingRequestCase_ = 0;
      streamingRequest_ = null;
    }
  }

  public static final int AUDIO_CONTENT_FIELD_NUMBER = 2;
  /**
   * <pre>
   * The audio data to be recognized. Sequential chunks of audio data are sent
   * in sequential `StreamingRecognizeRequest` messages. The first
   * `StreamingRecognizeRequest` message must not contain `audio_content` data
   * and all subsequent `StreamingRecognizeRequest` messages must contain
   * `audio_content` data. The audio bytes must be encoded as specified in
   * `RecognitionConfig`. Note: as with all bytes fields, protobuffers use a
   * pure binary representation (not base64). See
   * [audio limits](https://cloud.google.com/speech/limits#content).
   * </pre>
   *
   * <code>optional bytes audio_content = 2;</code>
   */
  public com.google.protobuf.ByteString getAudioContent() {
    if (streamingRequestCase_ == 2) {
      return (com.google.protobuf.ByteString) streamingRequest_;
    }
    return com.google.protobuf.ByteString.EMPTY;
  }
  /**
   * <pre>
   * The audio data to be recognized. Sequential chunks of audio data are sent
   * in sequential `StreamingRecognizeRequest` messages. The first
   * `StreamingRecognizeRequest` message must not contain `audio_content` data
   * and all subsequent `StreamingRecognizeRequest` messages must contain
   * `audio_content` data. The audio bytes must be encoded as specified in
   * `RecognitionConfig`. Note: as with all bytes fields, protobuffers use a
   * pure binary representation (not base64). See
   * [audio limits](https://cloud.google.com/speech/limits#content).
   * </pre>
   *
   * <code>optional bytes audio_content = 2;</code>
   */
  private void setAudioContent(com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  streamingRequestCase_ = 2;
    streamingRequest_ = value;
  }
  /**
   * <pre>
   * The audio data to be recognized. Sequential chunks of audio data are sent
   * in sequential `StreamingRecognizeRequest` messages. The first
   * `StreamingRecognizeRequest` message must not contain `audio_content` data
   * and all subsequent `StreamingRecognizeRequest` messages must contain
   * `audio_content` data. The audio bytes must be encoded as specified in
   * `RecognitionConfig`. Note: as with all bytes fields, protobuffers use a
   * pure binary representation (not base64). See
   * [audio limits](https://cloud.google.com/speech/limits#content).
   * </pre>
   *
   * <code>optional bytes audio_content = 2;</code>
   */
  private void clearAudioContent() {
    if (streamingRequestCase_ == 2) {
      streamingRequestCase_ = 0;
      streamingRequest_ = null;
    }
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (streamingRequestCase_ == 1) {
      output.writeMessage(1, (com.google.cloud.speech.v1.StreamingRecognitionConfig) streamingRequest_);
    }
    if (streamingRequestCase_ == 2) {
      output.writeBytes(
          2, (com.google.protobuf.ByteString)((com.google.protobuf.ByteString) streamingRequest_));
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (streamingRequestCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (com.google.cloud.speech.v1.StreamingRecognitionConfig) streamingRequest_);
    }
    if (streamingRequestCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(
            2, (com.google.protobuf.ByteString)((com.google.protobuf.ByteString) streamingRequest_));
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.google.cloud.speech.v1.StreamingRecognizeRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.cloud.speech.v1.StreamingRecognizeRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.cloud.speech.v1.StreamingRecognizeRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.cloud.speech.v1.StreamingRecognizeRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.cloud.speech.v1.StreamingRecognizeRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.cloud.speech.v1.StreamingRecognizeRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.cloud.speech.v1.StreamingRecognizeRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.google.cloud.speech.v1.StreamingRecognizeRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.cloud.speech.v1.StreamingRecognizeRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.cloud.speech.v1.StreamingRecognizeRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.cloud.speech.v1.StreamingRecognizeRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * The top-level message sent by the client for the `StreamingRecognize` method.
   * Multiple `StreamingRecognizeRequest` messages are sent. The first message
   * must contain a `streaming_config` message and must not contain `audio` data.
   * All subsequent messages must contain `audio` data and must not contain a
   * `streaming_config` message.
   * </pre>
   *
   * Protobuf type {@code google.cloud.speech.v1.StreamingRecognizeRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.cloud.speech.v1.StreamingRecognizeRequest, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.cloud.speech.v1.StreamingRecognizeRequest)
      com.google.cloud.speech.v1.StreamingRecognizeRequestOrBuilder {
    // Construct using com.google.cloud.speech.v1.StreamingRecognizeRequest.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    public StreamingRequestCase
        getStreamingRequestCase() {
      return instance.getStreamingRequestCase();
    }

    public Builder clearStreamingRequest() {
      copyOnWrite();
      instance.clearStreamingRequest();
      return this;
    }


    /**
     * <pre>
     * Provides information to the recognizer that specifies how to process the
     * request. The first `StreamingRecognizeRequest` message must contain a
     * `streaming_config`  message.
     * </pre>
     *
     * <code>optional .google.cloud.speech.v1.StreamingRecognitionConfig streaming_config = 1;</code>
     */
    public com.google.cloud.speech.v1.StreamingRecognitionConfig getStreamingConfig() {
      return instance.getStreamingConfig();
    }
    /**
     * <pre>
     * Provides information to the recognizer that specifies how to process the
     * request. The first `StreamingRecognizeRequest` message must contain a
     * `streaming_config`  message.
     * </pre>
     *
     * <code>optional .google.cloud.speech.v1.StreamingRecognitionConfig streaming_config = 1;</code>
     */
    public Builder setStreamingConfig(com.google.cloud.speech.v1.StreamingRecognitionConfig value) {
      copyOnWrite();
      instance.setStreamingConfig(value);
      return this;
    }
    /**
     * <pre>
     * Provides information to the recognizer that specifies how to process the
     * request. The first `StreamingRecognizeRequest` message must contain a
     * `streaming_config`  message.
     * </pre>
     *
     * <code>optional .google.cloud.speech.v1.StreamingRecognitionConfig streaming_config = 1;</code>
     */
    public Builder setStreamingConfig(
        com.google.cloud.speech.v1.StreamingRecognitionConfig.Builder builderForValue) {
      copyOnWrite();
      instance.setStreamingConfig(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Provides information to the recognizer that specifies how to process the
     * request. The first `StreamingRecognizeRequest` message must contain a
     * `streaming_config`  message.
     * </pre>
     *
     * <code>optional .google.cloud.speech.v1.StreamingRecognitionConfig streaming_config = 1;</code>
     */
    public Builder mergeStreamingConfig(com.google.cloud.speech.v1.StreamingRecognitionConfig value) {
      copyOnWrite();
      instance.mergeStreamingConfig(value);
      return this;
    }
    /**
     * <pre>
     * Provides information to the recognizer that specifies how to process the
     * request. The first `StreamingRecognizeRequest` message must contain a
     * `streaming_config`  message.
     * </pre>
     *
     * <code>optional .google.cloud.speech.v1.StreamingRecognitionConfig streaming_config = 1;</code>
     */
    public Builder clearStreamingConfig() {
      copyOnWrite();
      instance.clearStreamingConfig();
      return this;
    }

    /**
     * <pre>
     * The audio data to be recognized. Sequential chunks of audio data are sent
     * in sequential `StreamingRecognizeRequest` messages. The first
     * `StreamingRecognizeRequest` message must not contain `audio_content` data
     * and all subsequent `StreamingRecognizeRequest` messages must contain
     * `audio_content` data. The audio bytes must be encoded as specified in
     * `RecognitionConfig`. Note: as with all bytes fields, protobuffers use a
     * pure binary representation (not base64). See
     * [audio limits](https://cloud.google.com/speech/limits#content).
     * </pre>
     *
     * <code>optional bytes audio_content = 2;</code>
     */
    public com.google.protobuf.ByteString getAudioContent() {
      return instance.getAudioContent();
    }
    /**
     * <pre>
     * The audio data to be recognized. Sequential chunks of audio data are sent
     * in sequential `StreamingRecognizeRequest` messages. The first
     * `StreamingRecognizeRequest` message must not contain `audio_content` data
     * and all subsequent `StreamingRecognizeRequest` messages must contain
     * `audio_content` data. The audio bytes must be encoded as specified in
     * `RecognitionConfig`. Note: as with all bytes fields, protobuffers use a
     * pure binary representation (not base64). See
     * [audio limits](https://cloud.google.com/speech/limits#content).
     * </pre>
     *
     * <code>optional bytes audio_content = 2;</code>
     */
    public Builder setAudioContent(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setAudioContent(value);
      return this;
    }
    /**
     * <pre>
     * The audio data to be recognized. Sequential chunks of audio data are sent
     * in sequential `StreamingRecognizeRequest` messages. The first
     * `StreamingRecognizeRequest` message must not contain `audio_content` data
     * and all subsequent `StreamingRecognizeRequest` messages must contain
     * `audio_content` data. The audio bytes must be encoded as specified in
     * `RecognitionConfig`. Note: as with all bytes fields, protobuffers use a
     * pure binary representation (not base64). See
     * [audio limits](https://cloud.google.com/speech/limits#content).
     * </pre>
     *
     * <code>optional bytes audio_content = 2;</code>
     */
    public Builder clearAudioContent() {
      copyOnWrite();
      instance.clearAudioContent();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.cloud.speech.v1.StreamingRecognizeRequest)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.cloud.speech.v1.StreamingRecognizeRequest();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.google.cloud.speech.v1.StreamingRecognizeRequest other = (com.google.cloud.speech.v1.StreamingRecognizeRequest) arg1;
        switch (other.getStreamingRequestCase()) {
          case STREAMING_CONFIG: {
            streamingRequest_ = visitor.visitOneofMessage(
                streamingRequestCase_ == 1,
                streamingRequest_,
                other.streamingRequest_);
            break;
          }
          case AUDIO_CONTENT: {
            streamingRequest_ = visitor.visitOneofByteString(
                streamingRequestCase_ == 2, streamingRequest_, other.streamingRequest_);
            break;
          }
          case STREAMINGREQUEST_NOT_SET: {
            visitor.visitOneofNotSet(streamingRequestCase_ != 0);
            break;
          }
        }
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          if (other.streamingRequestCase_ != 0) {
            streamingRequestCase_ = other.streamingRequestCase_;
          }
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                com.google.cloud.speech.v1.StreamingRecognitionConfig.Builder subBuilder = null;
                if (streamingRequestCase_ == 1) {
                  subBuilder = ((com.google.cloud.speech.v1.StreamingRecognitionConfig) streamingRequest_).toBuilder();
                }
                streamingRequest_ =
                     input.readMessage(com.google.cloud.speech.v1.StreamingRecognitionConfig.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.google.cloud.speech.v1.StreamingRecognitionConfig) streamingRequest_);
                  streamingRequest_ = subBuilder.buildPartial();
                }
                streamingRequestCase_ = 1;
                break;
              }
              case 18: {
                streamingRequestCase_ = 2;
                streamingRequest_ = input.readBytes();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.google.cloud.speech.v1.StreamingRecognizeRequest.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.StreamingRecognizeRequest)
  private static final com.google.cloud.speech.v1.StreamingRecognizeRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new StreamingRecognizeRequest();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.google.cloud.speech.v1.StreamingRecognizeRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<StreamingRecognizeRequest> PARSER;

  public static com.google.protobuf.Parser<StreamingRecognizeRequest> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

