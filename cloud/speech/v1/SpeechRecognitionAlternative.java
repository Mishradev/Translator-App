// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/speech/v1/cloud_speech.proto

package com.google.cloud.speech.v1;

/**
 * <pre>
 * Alternative hypotheses (a.k.a. n-best list).
 * </pre>
 *
 * Protobuf type {@code google.cloud.speech.v1.SpeechRecognitionAlternative}
 */
public  final class SpeechRecognitionAlternative extends
    com.google.protobuf.GeneratedMessageLite<
        SpeechRecognitionAlternative, SpeechRecognitionAlternative.Builder> implements
    // @@protoc_insertion_point(message_implements:google.cloud.speech.v1.SpeechRecognitionAlternative)
    SpeechRecognitionAlternativeOrBuilder {
  private SpeechRecognitionAlternative() {
    transcript_ = "";
    words_ = emptyProtobufList();
  }
  private int bitField0_;
  public static final int TRANSCRIPT_FIELD_NUMBER = 1;
  private java.lang.String transcript_;
  /**
   * <pre>
   * *Output-only* Transcript text representing the words that the user spoke.
   * </pre>
   *
   * <code>optional string transcript = 1;</code>
   */
  public java.lang.String getTranscript() {
    return transcript_;
  }
  /**
   * <pre>
   * *Output-only* Transcript text representing the words that the user spoke.
   * </pre>
   *
   * <code>optional string transcript = 1;</code>
   */
  public com.google.protobuf.ByteString
      getTranscriptBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(transcript_);
  }
  /**
   * <pre>
   * *Output-only* Transcript text representing the words that the user spoke.
   * </pre>
   *
   * <code>optional string transcript = 1;</code>
   */
  private void setTranscript(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    transcript_ = value;
  }
  /**
   * <pre>
   * *Output-only* Transcript text representing the words that the user spoke.
   * </pre>
   *
   * <code>optional string transcript = 1;</code>
   */
  private void clearTranscript() {
    
    transcript_ = getDefaultInstance().getTranscript();
  }
  /**
   * <pre>
   * *Output-only* Transcript text representing the words that the user spoke.
   * </pre>
   *
   * <code>optional string transcript = 1;</code>
   */
  private void setTranscriptBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    transcript_ = value.toStringUtf8();
  }

  public static final int CONFIDENCE_FIELD_NUMBER = 2;
  private float confidence_;
  /**
   * <pre>
   * *Output-only* The confidence estimate between 0.0 and 1.0. A higher number
   * indicates an estimated greater likelihood that the recognized words are
   * correct. This field is typically provided only for the top hypothesis, and
   * only for `is_final=true` results. Clients should not rely on the
   * `confidence` field as it is not guaranteed to be accurate or consistent.
   * The default of 0.0 is a sentinel value indicating `confidence` was not set.
   * </pre>
   *
   * <code>optional float confidence = 2;</code>
   */
  public float getConfidence() {
    return confidence_;
  }
  /**
   * <pre>
   * *Output-only* The confidence estimate between 0.0 and 1.0. A higher number
   * indicates an estimated greater likelihood that the recognized words are
   * correct. This field is typically provided only for the top hypothesis, and
   * only for `is_final=true` results. Clients should not rely on the
   * `confidence` field as it is not guaranteed to be accurate or consistent.
   * The default of 0.0 is a sentinel value indicating `confidence` was not set.
   * </pre>
   *
   * <code>optional float confidence = 2;</code>
   */
  private void setConfidence(float value) {
    
    confidence_ = value;
  }
  /**
   * <pre>
   * *Output-only* The confidence estimate between 0.0 and 1.0. A higher number
   * indicates an estimated greater likelihood that the recognized words are
   * correct. This field is typically provided only for the top hypothesis, and
   * only for `is_final=true` results. Clients should not rely on the
   * `confidence` field as it is not guaranteed to be accurate or consistent.
   * The default of 0.0 is a sentinel value indicating `confidence` was not set.
   * </pre>
   *
   * <code>optional float confidence = 2;</code>
   */
  private void clearConfidence() {
    
    confidence_ = 0F;
  }

  public static final int WORDS_FIELD_NUMBER = 3;
  private com.google.protobuf.Internal.ProtobufList<com.google.cloud.speech.v1.WordInfo> words_;
  /**
   * <pre>
   * *Output-only* A list of word-specific information for each recognized word.
   * </pre>
   *
   * <code>repeated .google.cloud.speech.v1.WordInfo words = 3;</code>
   */
  public java.util.List<com.google.cloud.speech.v1.WordInfo> getWordsList() {
    return words_;
  }
  /**
   * <pre>
   * *Output-only* A list of word-specific information for each recognized word.
   * </pre>
   *
   * <code>repeated .google.cloud.speech.v1.WordInfo words = 3;</code>
   */
  public java.util.List<? extends com.google.cloud.speech.v1.WordInfoOrBuilder> 
      getWordsOrBuilderList() {
    return words_;
  }
  /**
   * <pre>
   * *Output-only* A list of word-specific information for each recognized word.
   * </pre>
   *
   * <code>repeated .google.cloud.speech.v1.WordInfo words = 3;</code>
   */
  public int getWordsCount() {
    return words_.size();
  }
  /**
   * <pre>
   * *Output-only* A list of word-specific information for each recognized word.
   * </pre>
   *
   * <code>repeated .google.cloud.speech.v1.WordInfo words = 3;</code>
   */
  public com.google.cloud.speech.v1.WordInfo getWords(int index) {
    return words_.get(index);
  }
  /**
   * <pre>
   * *Output-only* A list of word-specific information for each recognized word.
   * </pre>
   *
   * <code>repeated .google.cloud.speech.v1.WordInfo words = 3;</code>
   */
  public com.google.cloud.speech.v1.WordInfoOrBuilder getWordsOrBuilder(
      int index) {
    return words_.get(index);
  }
  private void ensureWordsIsMutable() {
    if (!words_.isModifiable()) {
      words_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(words_);
     }
  }

  /**
   * <pre>
   * *Output-only* A list of word-specific information for each recognized word.
   * </pre>
   *
   * <code>repeated .google.cloud.speech.v1.WordInfo words = 3;</code>
   */
  private void setWords(
      int index, com.google.cloud.speech.v1.WordInfo value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureWordsIsMutable();
    words_.set(index, value);
  }
  /**
   * <pre>
   * *Output-only* A list of word-specific information for each recognized word.
   * </pre>
   *
   * <code>repeated .google.cloud.speech.v1.WordInfo words = 3;</code>
   */
  private void setWords(
      int index, com.google.cloud.speech.v1.WordInfo.Builder builderForValue) {
    ensureWordsIsMutable();
    words_.set(index, builderForValue.build());
  }
  /**
   * <pre>
   * *Output-only* A list of word-specific information for each recognized word.
   * </pre>
   *
   * <code>repeated .google.cloud.speech.v1.WordInfo words = 3;</code>
   */
  private void addWords(com.google.cloud.speech.v1.WordInfo value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureWordsIsMutable();
    words_.add(value);
  }
  /**
   * <pre>
   * *Output-only* A list of word-specific information for each recognized word.
   * </pre>
   *
   * <code>repeated .google.cloud.speech.v1.WordInfo words = 3;</code>
   */
  private void addWords(
      int index, com.google.cloud.speech.v1.WordInfo value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureWordsIsMutable();
    words_.add(index, value);
  }
  /**
   * <pre>
   * *Output-only* A list of word-specific information for each recognized word.
   * </pre>
   *
   * <code>repeated .google.cloud.speech.v1.WordInfo words = 3;</code>
   */
  private void addWords(
      com.google.cloud.speech.v1.WordInfo.Builder builderForValue) {
    ensureWordsIsMutable();
    words_.add(builderForValue.build());
  }
  /**
   * <pre>
   * *Output-only* A list of word-specific information for each recognized word.
   * </pre>
   *
   * <code>repeated .google.cloud.speech.v1.WordInfo words = 3;</code>
   */
  private void addWords(
      int index, com.google.cloud.speech.v1.WordInfo.Builder builderForValue) {
    ensureWordsIsMutable();
    words_.add(index, builderForValue.build());
  }
  /**
   * <pre>
   * *Output-only* A list of word-specific information for each recognized word.
   * </pre>
   *
   * <code>repeated .google.cloud.speech.v1.WordInfo words = 3;</code>
   */
  private void addAllWords(
      java.lang.Iterable<? extends com.google.cloud.speech.v1.WordInfo> values) {
    ensureWordsIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, words_);
  }
  /**
   * <pre>
   * *Output-only* A list of word-specific information for each recognized word.
   * </pre>
   *
   * <code>repeated .google.cloud.speech.v1.WordInfo words = 3;</code>
   */
  private void clearWords() {
    words_ = emptyProtobufList();
  }
  /**
   * <pre>
   * *Output-only* A list of word-specific information for each recognized word.
   * </pre>
   *
   * <code>repeated .google.cloud.speech.v1.WordInfo words = 3;</code>
   */
  private void removeWords(int index) {
    ensureWordsIsMutable();
    words_.remove(index);
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!transcript_.isEmpty()) {
      output.writeString(1, getTranscript());
    }
    if (confidence_ != 0F) {
      output.writeFloat(2, confidence_);
    }
    for (int i = 0; i < words_.size(); i++) {
      output.writeMessage(3, words_.get(i));
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (!transcript_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getTranscript());
    }
    if (confidence_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(2, confidence_);
    }
    for (int i = 0; i < words_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, words_.get(i));
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.google.cloud.speech.v1.SpeechRecognitionAlternative parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.cloud.speech.v1.SpeechRecognitionAlternative parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.cloud.speech.v1.SpeechRecognitionAlternative parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.cloud.speech.v1.SpeechRecognitionAlternative parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.cloud.speech.v1.SpeechRecognitionAlternative parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.cloud.speech.v1.SpeechRecognitionAlternative parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.cloud.speech.v1.SpeechRecognitionAlternative parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.google.cloud.speech.v1.SpeechRecognitionAlternative parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.cloud.speech.v1.SpeechRecognitionAlternative parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.cloud.speech.v1.SpeechRecognitionAlternative parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.cloud.speech.v1.SpeechRecognitionAlternative prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Alternative hypotheses (a.k.a. n-best list).
   * </pre>
   *
   * Protobuf type {@code google.cloud.speech.v1.SpeechRecognitionAlternative}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.cloud.speech.v1.SpeechRecognitionAlternative, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.cloud.speech.v1.SpeechRecognitionAlternative)
      com.google.cloud.speech.v1.SpeechRecognitionAlternativeOrBuilder {
    // Construct using com.google.cloud.speech.v1.SpeechRecognitionAlternative.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * *Output-only* Transcript text representing the words that the user spoke.
     * </pre>
     *
     * <code>optional string transcript = 1;</code>
     */
    public java.lang.String getTranscript() {
      return instance.getTranscript();
    }
    /**
     * <pre>
     * *Output-only* Transcript text representing the words that the user spoke.
     * </pre>
     *
     * <code>optional string transcript = 1;</code>
     */
    public com.google.protobuf.ByteString
        getTranscriptBytes() {
      return instance.getTranscriptBytes();
    }
    /**
     * <pre>
     * *Output-only* Transcript text representing the words that the user spoke.
     * </pre>
     *
     * <code>optional string transcript = 1;</code>
     */
    public Builder setTranscript(
        java.lang.String value) {
      copyOnWrite();
      instance.setTranscript(value);
      return this;
    }
    /**
     * <pre>
     * *Output-only* Transcript text representing the words that the user spoke.
     * </pre>
     *
     * <code>optional string transcript = 1;</code>
     */
    public Builder clearTranscript() {
      copyOnWrite();
      instance.clearTranscript();
      return this;
    }
    /**
     * <pre>
     * *Output-only* Transcript text representing the words that the user spoke.
     * </pre>
     *
     * <code>optional string transcript = 1;</code>
     */
    public Builder setTranscriptBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setTranscriptBytes(value);
      return this;
    }

    /**
     * <pre>
     * *Output-only* The confidence estimate between 0.0 and 1.0. A higher number
     * indicates an estimated greater likelihood that the recognized words are
     * correct. This field is typically provided only for the top hypothesis, and
     * only for `is_final=true` results. Clients should not rely on the
     * `confidence` field as it is not guaranteed to be accurate or consistent.
     * The default of 0.0 is a sentinel value indicating `confidence` was not set.
     * </pre>
     *
     * <code>optional float confidence = 2;</code>
     */
    public float getConfidence() {
      return instance.getConfidence();
    }
    /**
     * <pre>
     * *Output-only* The confidence estimate between 0.0 and 1.0. A higher number
     * indicates an estimated greater likelihood that the recognized words are
     * correct. This field is typically provided only for the top hypothesis, and
     * only for `is_final=true` results. Clients should not rely on the
     * `confidence` field as it is not guaranteed to be accurate or consistent.
     * The default of 0.0 is a sentinel value indicating `confidence` was not set.
     * </pre>
     *
     * <code>optional float confidence = 2;</code>
     */
    public Builder setConfidence(float value) {
      copyOnWrite();
      instance.setConfidence(value);
      return this;
    }
    /**
     * <pre>
     * *Output-only* The confidence estimate between 0.0 and 1.0. A higher number
     * indicates an estimated greater likelihood that the recognized words are
     * correct. This field is typically provided only for the top hypothesis, and
     * only for `is_final=true` results. Clients should not rely on the
     * `confidence` field as it is not guaranteed to be accurate or consistent.
     * The default of 0.0 is a sentinel value indicating `confidence` was not set.
     * </pre>
     *
     * <code>optional float confidence = 2;</code>
     */
    public Builder clearConfidence() {
      copyOnWrite();
      instance.clearConfidence();
      return this;
    }

    /**
     * <pre>
     * *Output-only* A list of word-specific information for each recognized word.
     * </pre>
     *
     * <code>repeated .google.cloud.speech.v1.WordInfo words = 3;</code>
     */
    public java.util.List<com.google.cloud.speech.v1.WordInfo> getWordsList() {
      return java.util.Collections.unmodifiableList(
          instance.getWordsList());
    }
    /**
     * <pre>
     * *Output-only* A list of word-specific information for each recognized word.
     * </pre>
     *
     * <code>repeated .google.cloud.speech.v1.WordInfo words = 3;</code>
     */
    public int getWordsCount() {
      return instance.getWordsCount();
    }/**
     * <pre>
     * *Output-only* A list of word-specific information for each recognized word.
     * </pre>
     *
     * <code>repeated .google.cloud.speech.v1.WordInfo words = 3;</code>
     */
    public com.google.cloud.speech.v1.WordInfo getWords(int index) {
      return instance.getWords(index);
    }
    /**
     * <pre>
     * *Output-only* A list of word-specific information for each recognized word.
     * </pre>
     *
     * <code>repeated .google.cloud.speech.v1.WordInfo words = 3;</code>
     */
    public Builder setWords(
        int index, com.google.cloud.speech.v1.WordInfo value) {
      copyOnWrite();
      instance.setWords(index, value);
      return this;
    }
    /**
     * <pre>
     * *Output-only* A list of word-specific information for each recognized word.
     * </pre>
     *
     * <code>repeated .google.cloud.speech.v1.WordInfo words = 3;</code>
     */
    public Builder setWords(
        int index, com.google.cloud.speech.v1.WordInfo.Builder builderForValue) {
      copyOnWrite();
      instance.setWords(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * *Output-only* A list of word-specific information for each recognized word.
     * </pre>
     *
     * <code>repeated .google.cloud.speech.v1.WordInfo words = 3;</code>
     */
    public Builder addWords(com.google.cloud.speech.v1.WordInfo value) {
      copyOnWrite();
      instance.addWords(value);
      return this;
    }
    /**
     * <pre>
     * *Output-only* A list of word-specific information for each recognized word.
     * </pre>
     *
     * <code>repeated .google.cloud.speech.v1.WordInfo words = 3;</code>
     */
    public Builder addWords(
        int index, com.google.cloud.speech.v1.WordInfo value) {
      copyOnWrite();
      instance.addWords(index, value);
      return this;
    }
    /**
     * <pre>
     * *Output-only* A list of word-specific information for each recognized word.
     * </pre>
     *
     * <code>repeated .google.cloud.speech.v1.WordInfo words = 3;</code>
     */
    public Builder addWords(
        com.google.cloud.speech.v1.WordInfo.Builder builderForValue) {
      copyOnWrite();
      instance.addWords(builderForValue);
      return this;
    }
    /**
     * <pre>
     * *Output-only* A list of word-specific information for each recognized word.
     * </pre>
     *
     * <code>repeated .google.cloud.speech.v1.WordInfo words = 3;</code>
     */
    public Builder addWords(
        int index, com.google.cloud.speech.v1.WordInfo.Builder builderForValue) {
      copyOnWrite();
      instance.addWords(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * *Output-only* A list of word-specific information for each recognized word.
     * </pre>
     *
     * <code>repeated .google.cloud.speech.v1.WordInfo words = 3;</code>
     */
    public Builder addAllWords(
        java.lang.Iterable<? extends com.google.cloud.speech.v1.WordInfo> values) {
      copyOnWrite();
      instance.addAllWords(values);
      return this;
    }
    /**
     * <pre>
     * *Output-only* A list of word-specific information for each recognized word.
     * </pre>
     *
     * <code>repeated .google.cloud.speech.v1.WordInfo words = 3;</code>
     */
    public Builder clearWords() {
      copyOnWrite();
      instance.clearWords();
      return this;
    }
    /**
     * <pre>
     * *Output-only* A list of word-specific information for each recognized word.
     * </pre>
     *
     * <code>repeated .google.cloud.speech.v1.WordInfo words = 3;</code>
     */
    public Builder removeWords(int index) {
      copyOnWrite();
      instance.removeWords(index);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.cloud.speech.v1.SpeechRecognitionAlternative)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.cloud.speech.v1.SpeechRecognitionAlternative();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        words_.makeImmutable();
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.google.cloud.speech.v1.SpeechRecognitionAlternative other = (com.google.cloud.speech.v1.SpeechRecognitionAlternative) arg1;
        transcript_ = visitor.visitString(!transcript_.isEmpty(), transcript_,
            !other.transcript_.isEmpty(), other.transcript_);
        confidence_ = visitor.visitFloat(confidence_ != 0F, confidence_,
            other.confidence_ != 0F, other.confidence_);
        words_= visitor.visitList(words_, other.words_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readStringRequireUtf8();

                transcript_ = s;
                break;
              }
              case 21: {

                confidence_ = input.readFloat();
                break;
              }
              case 26: {
                if (!words_.isModifiable()) {
                  words_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(words_);
                }
                words_.add(
                    input.readMessage(com.google.cloud.speech.v1.WordInfo.parser(), extensionRegistry));
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.google.cloud.speech.v1.SpeechRecognitionAlternative.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.cloud.speech.v1.SpeechRecognitionAlternative)
  private static final com.google.cloud.speech.v1.SpeechRecognitionAlternative DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new SpeechRecognitionAlternative();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.google.cloud.speech.v1.SpeechRecognitionAlternative getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<SpeechRecognitionAlternative> PARSER;

  public static com.google.protobuf.Parser<SpeechRecognitionAlternative> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

